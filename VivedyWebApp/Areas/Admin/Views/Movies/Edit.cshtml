@model VivedyWebApp.Areas.Admin.Models.ViewModels.MoviesAdminViewModel

@{
    ViewBag.Title = "Edit Movie";
}

@using (Html.BeginForm("Edit", "Movies", null, FormMethod.Post, new { role = "form", enctype = "multipart/form-data", @class="vivedy-form-boi" }))
{
    @Html.AntiForgeryToken()

    <div class="containerOneAdmin">
        <div class="white-bg-color mx-auto text-dark " style="max-width: 750px; border: 0.5rem solid #a8000a;">
            <div class="mb-5 mt-4 phenomena-sm border-bottom border-dark " style="color: #a8000a"><h1 class="display-5">EDIT MOVIE</h1></div>
            <div class="border-bottom">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.Id)
                <div class="row">
                    <div class="col-3 phenomena-sm">@Html.LabelFor(model => model.Name) : </div>
                    <div class="mb-3 col-md-8 phenomena-sm">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "col-md-12" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row">
                    <div class="col-3 phenomena-sm">@Html.LabelFor(model => model.Rating) :</div>
                    <div class=" mb-3 col-md-8 phenomena-sm">

                        @Html.EditorFor(model => model.Rating, new { htmlAttributes = new { @class = "col-md-12" } })
                        @Html.ValidationMessageFor(model => model.Rating, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row">
                    <div class="col-3 phenomena-sm">@Html.LabelFor(model => model.ViewerRating) :</div>
                    <div class=" mb-3 col-md-8 phenomena-sm">

                        @Html.EditorFor(model => model.ViewerRating, new { htmlAttributes = new { @class = "col-md-12" } })
                        @Html.ValidationMessageFor(model => model.ViewerRating, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row">
                    <div class="col-3 phenomena-sm">@Html.LabelFor(model => model.Category) :</div>
                    <div class="mb-3 col-md-8 phenomena-sm">
                        @Html.EditorFor(model => model.Category, new { htmlAttributes = new { @class = "col-md-12" } })
                        @Html.ValidationMessageFor(model => model.Category, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row">
                    <div class="col-3 phenomena-sm">@Html.LabelFor(model => model.Description) : </div>
                    <div class="mb-3 col-md-8 phenomena-sm">

                        @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "col-md-12" } })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row">
                    <label class="col-3 phenomena-sm">@Html.LabelFor(model => model.Duration):</label>
                    <div class="mb-3 col-md-8 phenomena-sm">
                        @Html.EditorFor(model => model.Duration, new { htmlAttributes = new { @class = "col-md-12", @value = Model.Duration.ToString(@"hh\:mm") } })
                        @Html.ValidationMessageFor(model => model.Duration, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row">
                    <div class="col-3 phenomena-sm">@Html.LabelFor(model => model.Price) :</div>
                    <div class="mb-3 col-md-8 phenomena-sm">
                        @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "col-md-12" } })
                        @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-3 phenomena-sm">@Html.LabelFor(model => model.TrailerUrl) :</div>
                    <div class="mb-3 col-md-8 phenomena-sm">
                        @Html.EditorFor(model => model.TrailerUrl, new { htmlAttributes = new { @class = "col-md-12" } })
                        @Html.ValidationMessageFor(model => model.TrailerUrl, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-3 phenomena-sm">@Html.LabelFor(model => model.ReleaseDate) :</div>
                    <div class="mb-3 col-md-8 phenomena-sm">
                        @Html.EditorFor(model => model.ReleaseDate, new { htmlAttributes = new { @class = "col-md-12", @format = "yyyy-MM-dd" } })
                        @Html.ValidationMessageFor(model => model.ReleaseDate, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-3 phenomena-sm">@Html.LabelFor(model => model.ClosingDate) :</div>
                    <div class="mb-3 col-md-8 phenomena-sm">
                        @Html.EditorFor(model => model.ClosingDate, new { htmlAttributes = new { @class = "col-md-12", @format = "yyyy-MM-dd" } })
                        @Html.ValidationMessageFor(model => model.ClosingDate, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-3 col-sm-12 phenomena-sm">Reupload @Html.LabelFor(model => model.HorizontalImage)?</div>
                    <div class="mb-3 col-sm-12 col-md-8 phenomena-sm">
                        <input accept="image/png" class="col-md-12 vivedy-hoz-image" data-val-file="The field Horizontal Poster must be a file."
                               id="HorizontalImage" name="HorizontalImage" type="file" value="">
                        @Html.ValidationMessageFor(model => model.HorizontalImage, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-3 col-sm-12 phenomena-sm">Reupload @Html.LabelFor(model => model.VerticalImage)?</div>
                    <div class="mb-3 col-md-8 phenomena-sm col-sm-12">
                        <input accept="image/png" class="col-md-12 vivedy-vet-image" data-val-file="The field Vertical Poster must be a file."
                               id="VerticalImage" name="VerticalImage" type="file" value="">
                        @Html.ValidationMessageFor(model => model.VerticalImage, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="row">

            </div>
            <div class="row">
                @Html.ActionLink("Back to List", "Index", routeValues: null, htmlAttributes: new { @class = "mt-3 text-link phenomena-sm ml-5" })
            </div>
        </div>
    </div>
}

<button class="btn btn-danger pl-5 pr-5 pt-2 pb-2 mt-3  mr-4 phenomena-sm vivedy-submit-button">Save</button>

<div class="canvas-dumpspace" hidden>

</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        let canvasCanvas = document.querySelector(".canvas-dumpspace");
        let verticalFILE = document.querySelector("input.vivedy-vet-image");
        let horizontalFILE = document.querySelector("input.vivedy-hoz-image");
        let trailerUrl = document.getElementById("TrailerUrl");
        let validYoutubeUrl = false;

        let validateUrl = function () {
            validateUrl = false;
            let url = trailerUrl.value;
            if (url == null || url == "") {
                return;
            }
            let id = url.split('/')[4];
            let ampersandPosition = id.indexOf('&');
            if(ampersandPosition != -1) {
              id = id.substring(0, ampersandPosition);
            }
		    var img = new Image();
		    img.src = "https://img.youtube.com/vi/" + id + "/mqdefault.jpg";
		    img.onload = function () {
                validYoutubeUrl = (this.width != 120);
		    }
        }

        document.getElementById("TrailerUrl").onchange = validateUrl;
        window.addEventListener('load', validateUrl);

        let readFileToDataURI = function (file) {
            return new Promise((resolve, reject) => {
                let fr = new FileReader();
                fr.readAsDataURL(file);

                fr.addEventListener("load", (e) => {
                    resolve(fr.result)
                });

                fr.addEventListener("error", (e) => {
                    reject(fr.error, e);
                });
            });
        };

        let resizeImage = async function (file, resolution) {
            return new Promise(async (resolve, reject) => {
                let dataURI = await readFileToDataURI(file);

                let canvas = document.createElement("canvas");
                let image = document.createElement("img");

                canvas.width = resolution.w;
                canvas.height = resolution.h;

                image.addEventListener("load", () => {
                    let nw = image.naturalWidth;
                    let nh = image.naturalHeight;

                    if (nw == canvas.width && nh == canvas.height) {
                        canvas.remove();
                        image.remove();
                        resolve(file);
                        return;
                    }

                    let ctx = canvas.getContext("2d");

                    if (nw / nh < canvas.width / canvas.height) {
                        let newHeight = Math.floor(canvas.width * nh / nw);
                        let offset = Math.floor((newHeight - canvas.height) / 2);
                        ctx.drawImage(image, 0, offset * -1, canvas.width, newHeight);
                    } else {
                        let newWidth = Math.floor(canvas.height * nw / nh);
                        let offset = Math.floor((newWidth - canvas.width) / 2);
                        ctx.drawImage(image, offset * -1, 0, newWidth, canvas.height);
                    }

                    canvas.toBlob((blob) => {
                        let file = new File([blob], "coolfile.png", { type: "image/png" } );

                        canvas.remove();
                        image.remove();
                        resolve(file);
                    }, "image/png", 0.9);

                    
                });

                image.src = dataURI;
                canvasCanvas.append(canvas, image);
            });
        };

        document.querySelector("button.vivedy-submit-button").addEventListener("click", async () => {
            if (!validYoutubeUrl) {
                alert("Invalid Trailer Url. The video does not exist. Please select a different video.")
                return;
            }
            if (verticalFILE.value) {
                let vetFile = verticalFILE.files[0];
                let newVFile = await resizeImage(vetFile, { w: 600, h: 800 });
                let vDataTransfer = new DataTransfer();
                vDataTransfer.items.add(newVFile);
                verticalFILE.files = vDataTransfer.files;
            }
            if (horizontalFILE.value) {
                let hozFile = horizontalFILE.files[0];
                let newHFile = await resizeImage(hozFile, { w: 1920, h: 900 });
                let hDataTransfer = new DataTransfer();
                hDataTransfer.items.add(newHFile);
                horizontalFILE.files = hDataTransfer.files;
            }
            document.querySelector(".vivedy-form-boi").submit();
        });
    </script>
}
