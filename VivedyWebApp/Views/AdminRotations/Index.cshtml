@model IEnumerable<VivedyWebApp.Models.Rotation>

@{
    ViewBag.Title = "Admin | Rotaions";
}

<div class="card mx-auto " style="width: auto; margin-top: 5rem; margin-bottom: 3rem;">
    <nav class="nav nav-pills nav-fill  row no-gutters phenomena-sm" style="background-color: #a8000a; ">
        <a class="nav-item nav-link raijaLink " href="/AdminMovies/Index">MOVIES</a>
        <a class="nav-item nav-link raijaLink" href="/AdminBookings/Index"> BOOKINGS </a>
        <a class="nav-item nav-link raijaLink" 
            style="background-color: #f0f0f0; color: #222; border-radius: 0rem; border-top: 5px solid #a8000a;">
            ROTATIONS
        </a>
        <a class="nav-item nav-link raijaLink" href="/AdminUsers/Index">USERS </a>
    </nav>
    <div class="white-bg-color">
        <a class="btn btn-danger  phenomena-sm " href="/AdminRotations/Create">ADD <i class="fas fa-plus"></i></a>
        <input type="text" class="mb-3 float-right" id="myInput" placeholder="Search..">
        <br>
        <table class="table table-striped  phenomena-sm" style="border: 8px solid #a8000a; color: #222;">
            <thead>
                <tr class="text-center ">
                    <th scope="col" style="width:100px">
                        @Html.DisplayNameFor(model => model.RotationId)
                    </th>
                    <th scope="col">
                        @Html.DisplayNameFor(model => model.StartTime)
                    </th>
                    <th scope="col">
                        @Html.DisplayNameFor(model => model.MovieId)
                    </th>
                    <th scope="col">

                    </th>
                </tr>
            </thead>
            <tbody id="myList">
                @foreach (var item in Model)
                {
                    <tr class="text-center">
                        <td style="width:100px; display: block; display: -webkit-box; height: 2rem; -webkit-line-clamp: 2; overflow: hidden; text-overflow: ellipsis;">
                            @Html.DisplayFor(modelItem => item.RotationId)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.StartTime)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.MovieId)
                        </td>
                        <td>
                            @Html.ActionLink("Edit", "Edit", "AdminRotations", routeValues: new { id = item.RotationId }, htmlAttributes: new { @class = "btn btn-danger  phenomena-sm ", style = "font-size: .7rem;" }) |
                            @Html.ActionLink("Details", "Details", "AdminRotations", routeValues: new { id = item.RotationId }, htmlAttributes: new { @class = "btn btn-danger  phenomena-sm ", style = "font-size: .7rem;" }) |
                            @Html.ActionLink("Delete", "Delete", "AdminRotations", routeValues: new { id = item.RotationId }, htmlAttributes: new { @class = "btn btn-danger  phenomena-sm ", style = "font-size: .7rem;" })
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<script>

let movieSearch;
let categoryDropdown;
let ratingDropdown;
let items = Array();

window.onload = function () {
    movieSearch = document.getElementById("SearchFor");
    categoryDropdown = document.getElementById("categoryFilter");
    ratingDropdown = document.getElementById("ratingFilter");
    movieSearch.oninput = SearchForMovie;
    categoryDropdown.oninput = CategorySelectionChange;
    ratingDropdown.oninput = RatingSelectionChange;

    let list = document.getElementById("moviesList");
    items = list.getElementsByClassName("movieCard");
    for (let i = 0; i < items.length; i++) {
        items[i].unmatched = false;
        items[i].filteredByRating = false;
        items[i].filteredByCategory = false;
        items[i].moviename = items[i].getElementsByClassName("movieName")[0].innerText;
        items[i].category = items[i].getElementsByClassName("movieCategory")[0].innerText;
        items[i].rating = items[i].getElementsByClassName("movieRating")[0].innerText;
    }
    document.getElementById("resetCategory").onclick = function () {
        for (var option of categoryDropdown.options) {
            option.selected = option.defaultSelected;
        }
        CategoryReset();
    }
    document.getElementById("resetRating").onclick = function () {
        for (var option of ratingDropdown.options) {
            option.selected = option.defaultSelected;
        }
        RatingReset();
    }
}
function SearchForMovie() {
    for (let i = 0; i < items.length; i++) {
        if (items[i].innerText.toUpperCase().indexOf(movieSearch.value.toUpperCase()) > -1) {
            items[i].unmatched = false;
            if (!items[i].filteredByRating && !items[i].filteredByCategory) {
                items[i].style.display = "";
            }
            else {
                items[i].style.display = "none";
            }
        }
        else {
            items[i].unmatched = true;
            items[i].style.display = "none";
        }


    };
}
function CategorySelectionChange() {
    var selected = [];
    for (var option of categoryDropdown.options) {
        if (option.selected) {
            selected.push(option.value)
        }
    }
    filterCategory(selected);
}
function RatingSelectionChange() {
    var selected = [];
    for (var option of ratingDropdown.options) {
        if (option.selected) {
            selected.push(option.value)
        }
    }
    filterRating(selected);
}
function filterCategory(categories) {
    for (let j = 0; j < categories.length; j++) {
        for (let i = 0; i < items.length; i++) {
            if (items[i].category == categories[j]) {
                items[i].filteredByCategory = false
                if (!items[i].unmatched && !items[i].filteredByRating) {
                    items[i].style.display = "";
                    continue;
                }
                else {
                    items[i].style.display = "none"
                }
            }
            else {
                items[i].filteredByCategory = true;
                items[i].style.display = "none";
            }
        };
    };
}
function filterRating(ratings) {
    for (let j = 0; j < ratings.length; j++) {
        for (let i = 0; i < items.length; i++) {
            if (items[i].rating == ratings[j]) {
                items[i].filteredByRating = false;
                if (!items[i].unmatched && !items[i].filteredByCategory) {
                    items[i].style.display = "";
                    continue;
                }
                else {
                    items[i].style.display = "none"
                }

            }
            else {
                items[i].filteredByRating = true;
                items[i].style.display = "none";
            }
        };
    };
}
function CategoryReset() {
    for (let i = 0; i < items.length; i++) {
        items[i].filteredByCategory = false;
        if (!items[i].unmatched && !items[i].filteredByRating) {
            items[i].style.display = "";
            continue;
        }
        else {
            items[i].style.display = "none"
        }
    }
}
function RatingReset() {
    for (let i = 0; i < items.length; i++) {
        items[i].filteredByRating = false;
        if (!items[i].unmatched && !items[i].filteredByCategory) {
            items[i].style.display = "";
            continue;
        }
        else {
            items[i].style.display = "none"
        }
    }
}


</script>
